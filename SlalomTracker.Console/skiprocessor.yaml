#
# Pre-requisites (secrets), ensure a secret is exists in a local file called gcloud.json
# Some instructions here: https://cloud.google.com/kubernetes-engine/docs/tutorials/authenticating-to-cloud-platform
#
# kubectl create secret generic gcloud-key -n ski --from-file=key.json=gcloud.json 
# kubectl create secret generic skisb-secret -n ski --from-literal=connectionstring=$SKISB
# kubectl create secret generic skiblobs-secret -n ski --from-literal=connectionstring=$SKIBLOBS
#
# Required for using ACI, make sure you have done an az acr login.
# NOTE: you cannot use AAD credentials, you need to get the username/password from acr.
# and set ACRSECRET=$()
# kubectl create secret docker-registry acr-secret -n ski --docker-server=wthacr.azurecr.io --docker-username=wthacr --docker-password=$ACRSECRET --docker-email=wthacr@azurecr.io

apiVersion: apps/v1
kind: Deployment
metadata:
  name: skiprocessor
  labels:
    app: skiprocessor
spec:
  replicas: 0 # This is going to be scaled by KEDA, so defaulting to 0.
  selector:
    matchLabels:
      app: skiprocessor
  template:
    metadata:
      labels:
        app: skiprocessor
    spec:
      volumes:
      - name: google-cloud-key
        secret:
          secretName: gcloud-key
      containers:
      - name: skiprocessor
        image: gcr.io/jasondel-test-project/skiconsole:v3.2.3
        resources:
          requests:
            cpu: "1000m"
            memory: "1.9Gi"
          limits:
            cpu: "2000m"
            memory: "3.0Gi"
        command: ["./ski"]
        args: ["-d", "5"]
        volumeMounts:
        - name: google-cloud-key
          mountPath: /var/secrets/google        
        env:
        - name: SKIBLOBS
          valueFrom:
            secretKeyRef:
              name: skiblob-secret
              key: connectionstring
        - name: SKISB
          valueFrom:
            secretKeyRef:
              name: skisb-secret
              key: connectionstring
        - name: SKIQUEUE
          value: "skiqueue"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/secrets/google/key.json
        #machine learning settings
        - name: SKIMLKEY
          valueFrom:
            secretKeyRef:
              name: skiml-secret
              key: key              
        - name: SKIMLROPEMODEL
          value: "RopeDetection-10"
        - name: SKIMLROPEID
          value: "e3ee86a8-f298-46b5-87fd-31a09f0480d7"
        - name: SKIMLSKIERID
          value: "c38bd611-86ee-43ff-ad76-20d339665e34"
        - name: SKIMLSKIERMODEL
          value: "SkierDetection-4"
        - name: GOOGLE_PROJECT_ID
          value: "fluted-quasar-240821"
        - name: GOOGLE_STORAGE_BUCKET
          value: "skivideo"
        - name: FIRESTORE_PROJECT_ID
          value: "gke-ski"
        - name: SKICROPURL
          value: "http://ski.jasondel.com/api/crop?width=1600&thumbnailUrl="
      #imagePullSecrets:
      #  - name: acr-secret
      # nodeSelector:
      # #   kubernetes.io/role: agent
      # #   beta.kubernetes.io/os: linux
      #    nodeRole: skiprocessor
      # tolerations:
      # - key: virtual-kubelet.io/provider
      #   operator: Exists
      # - key: azure
      #   effect: NoSchedule        